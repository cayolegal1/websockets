Así como existen eventos predeterminados en socket io, como los hemos visto (connect, reconnect_attempt, reconnect, disconnect, etc) nosotros también podemos emitir un evento custom cuando uno de los eventos predeterminados suceda. 

Por ejemplo, al producirse el evento de conexión, queremos emitir un evento custom que sucederá en ese mismo momento, podemos hacerlo con el método 'emit' del evento del evento que estamos emitiendo. Este recibe dos parámetros, el primero es el nombre del evento custom, que podría ser "welcome", el segundo es el mensaje que queremos enviar, en este caso puede ser "Welcome to our app"

    index.js:
      const io = new Server(httpServer);

      io.on('connection', (socket) => {
          console.log('socket =>', socket.id);
          socket.emit('welcome', 'welcome to our app!')
      });

Y eso lo recibimos en el cliente

    views/index.js:
      const client = io();

      client.on('connect', () => {
          console.log('client connected: ', client.id);
      });
      
      client.on('welcome', (res) => {
          console.log('welcome: ', res); // "welcome to our app"
      })

Pero también podemos programar para que el cliente emita eventos y recibirlos en el server, por ejemplo al momento de realizarse un click de algún elemento HTML

    views/index.js
      const client = io();

      client.on('connect', () => {
        console.log('client connected: ', client.id);
      });
      
      client.on('welcome', (res) => {
        console.log('welcome: ', res); // "welcome to our app"
      });


      document.querySelector("button").onclick = () => {
        client.emit("gratitude", "thanks for the amazing welcome");
      }

Y en el servidor:

    index.js: 
      index.js:
      const io = new Server(httpServer);

      io.on('connection', (socket) => {
        console.log('socket =>', socket.id);
        socket.emit('welcome', 'welcome to our app!');
        socket.on("gratitude", data => console.log(data)); // "thanks for the amazing welcome"
      });


También podemos mandar un evento a un cliente o socket en particular, por ejemplo un cliente se acaba de conectar, capturamos su id y enviamos un evento solo a ese cliente, eso lo hacemos con el método to de la instancia del server del socket

    index.js: 
      index.js:
      const io = new Server(httpServer);

      io.on('connection', (socket) => {
        console.log('socket =>', socket.id);
        socket.emit('welcome', 'welcome to our app!');
        socket.on("gratitude", data => console.log(data)); 
        io.to(socket.id).emit("first message", "hey!")
      });

