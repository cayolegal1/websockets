Ya tenemos la conexión de nuestro servidor conectado a la api de client io:

    index.js: 
      const {Server} = require('client.io');
      const {createServer} = require('http');
      const express = require('express);
      const app = express();
      const httpServerWithExpress = createServer(app);
      const io = Server(httpServerWithExpress);

Ahora, podemos empezar a programar nuestros métodos. Lo primero que deberíamos hacer es asegurarnos de que la conexión fue exitosa. Eso lo podemos hacer con el método de escuchador de eventos de client io, al cual tenemos acceso al mismo con la instancia de la clase Server de client io, el cual ya lo tenemos. 

Ese método recibe el nombre de 'on', quiere decir que cuando pase un evento podemos realizar diversas acciones. Este método recibe el nombre del evento como un string y un callback, el cual recibe como argumento el client en si. 

El nombre del evento de la conexión es 'connection', entonces podríamos hacer algo como:

    index.js: 
      const {Server} = require('client.io');
      const {createServer} = require('http');
      const express = require('express);
      const app = express();
      const httpServerWithExpress = createServer(app);
      const io = Server(httpServerWithExpress);

      io.on('connection', (client) => {
        console.log('client: ', client)
      });

Sabiendo eso, podríamos ver de una forma más visual los resultados de nuestro client. Entonces podríamos usar el servidor de estáticos de express para poder servir un HTML, el cual estará en un folder llamado view. 

    app.use('/view', express.static('views'));

Para que un archivo HTML pueda conectarse con un servidor que usa client io, debemos usar el script que proporciona la librería para poder conectarnos, el cual esta (si ya tenemos instalada la librería) el cual esta en "/client.io/client.io.js. Entonces quedaría así:

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <body>
        <h1>Socket io</h1>
    </body>
    <script src='/socket.io/socket.io.js'><script/>
    </html>

Luego un último script creado por nosotros en donde ejecutamos la función que expone client io para poder empezar a utilizar la librería en una web view.

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <body>
        <h1>Socket io</h1>
    </body>
    <script src='/socket.io/socket.io.js'><script/>
    <script>
      const client = io();
    </script>
    </html>

Gracias a esto client io detecta que hay una nueva conexión en el cliente y podemos tener información a todo lo que viene del on Connection del client. 

La lectura de la información la estamos haciendo en el servidor como tal. Si quisieramos mostrar la información en el cliente podríamos hacer lo mismoque hicimos en el código del servidor

    index.html:
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta http-equiv="X-UA-Compatible" content="IE=edge">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Document</title>
      </head>
      <body>
          <h1>Socket io</h1>
      </body>
      <script src='/socket.io/socket.io.js'><script/>
      <script>
        const client = io();
  
        client.on('connect', () => {
            console.log('client connected: ', client.id);
            console.log('client', client);
        })
      </script>
      </html>

Podemos escuchar otros eventos como, reconexión, intento de reconexión, etc. y hacer diferentes acciones al respecto. Pero a estos eventos podemos acceder a través del atributo 'io' de la instancia de socket io

index.html:
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta http-equiv="X-UA-Compatible" content="IE=edge">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Document</title>
      </head>
      <body>
          <h1>Socket io</h1>
      </body>
      <script src='/socket.io/socket.io.js'><script/>
      <script>
        const client = io();
  
        io.on('connect', () => {
            console.log('client connected: ', client.id);
        })

        client.io.on('reconnect_attempt', () => {
            console.log('intentando reconectar');
        })

        client.io.on('reconnect', () => {
            console.log('reconectado');
        })
      </script>
      </html>

Entonces, cuando nos hayamos desconectado por algún motivo y nuestro cliente aun sigue en pantalla, el podrá ver esos logs en la consola al intentar reconectarse al servidor, y también cuando se haya reconectado. Es importante tener en cuenta que si estamos desarrollando y hacemos un cambio en el server y en el cliente, tiene que refrescarse la página para que podamos ver los cambios